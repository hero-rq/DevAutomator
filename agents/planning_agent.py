import logging
from openai import OpenAI  # OpenAI v1.x client
from utils.logger import setup_logger  # Centralized logger from utils
import json

class PlanningAgent:
    def __init__(self, config):
        """
        Initializes the Planning Agent with the given configuration.
        :param config: A configuration object/dictionary containing planning notes and settings.
        """
        self.config = config
        self.logger = setup_logger(__name__)
        self.logger.info("PlanningAgent initialized with configuration.")

        # Initialize OpenAI Client
        self.client = OpenAI(api_key=self.config.get("openai_api_key", ""))

    def gather_requirements(self):
        """
        Gathers project requirements from configuration or external notes.
        :return: A list of requirement strings.
        """
        self.logger.info("Gathering requirements...")
        requirements = self.config.get('task_notes', ["Default Requirement: Setup project structure"])
        self.logger.info(f"Requirements gathered: {requirements}")
        return requirements

    def get_task_description(self, requirement):
        """
        Uses the OpenAI API to generate a detailed breakdown for a given requirement.
        :param requirement: A requirement string.
        :return: A detailed task description generated by the API.
        """
        try:
            self.logger.info("Querying OpenAI API for task refinement...")
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are an expert project manager."},
                    {"role": "user", "content": f"Break down the following requirement into actionable development tasks, including estimated effort: {requirement}"}
                ],
                max_tokens=200
            )
            task_details = response.choices[0].message.content.strip()
            self.logger.info("Received detailed task description from OpenAI API.")
            return task_details
        except Exception as e:
            self.logger.error(f"OpenAI API call failed: {e}")
            return f"Process for '{requirement}' needs to be defined."

    def decompose_tasks(self, requirements):
        """
        Decomposes the requirements into structured tasks.
        :param requirements: List of requirement strings.
        :return: A list of structured tasks.
        """
        self.logger.info("Decomposing requirements into structured tasks...")
        tasks = []
        for req in requirements:
            task_description = self.get_task_description(req)
            task = {
                "requirement": req,
                "details": task_description,
                "priority": "High" if "core" in req.lower() else "Medium",
                "estimated_time": "2-5 hours" if "unit tests" in req.lower() else "1-2 days"
            }
            tasks.append(task)
            self.logger.debug(f"Task created: {task}")
        self.logger.info("Task decomposition completed.")
        return tasks

    def formulate_plan(self):
        """
        Formulates a complete plan by combining requirement gathering and task decomposition.
        :return: A structured plan (list of tasks).
        """
        self.logger.info("Formulating the overall plan...")
        requirements = self.gather_requirements()
        tasks = self.decompose_tasks(requirements)
        self.logger.info("Plan formulation completed.")
        return tasks

    def generate_plan_script(self, plan):
        """
        Uses the OpenAI API to generate a complete Python script that prints the project plan.
        :param plan: A structured plan (list of tasks).
        :return: The generated Python script as a string.
        """
        self.logger.info("Generating plan script using OpenAI API...")
        # Convert the plan to a formatted JSON string for clarity in the prompt
        plan_json = json.dumps(plan, indent=2)
        prompt = (
            "Generate a complete Python script that, when executed, prints the following project plan in a clear and formatted manner:\n"
            f"{plan_json}\n\n"
            "The script should be well-commented and use pretty-print formatting for the output."
        )
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are a skilled Python developer."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=300
            )
            plan_script = response.choices[0].message.content.strip()
            self.logger.info("Plan script generated successfully.")
            return plan_script
        except Exception as e:
            self.logger.error(f"OpenAI API call failed for plan script generation: {e}")
            return "No plan script generated."

# Example usage (for testing the module individually)
if __name__ == "__main__":
    sample_config = {
        "openai_api_key": "YOUR_OPENAI_API_KEY_HERE",  # Replace with your actual API key
        "task_notes": [
            "Setup development environment",
            "Implement core features",
            "Write unit tests",
            "Prepare deployment scripts"
        ]
    }
    planning_agent = PlanningAgent(sample_config)
    plan = planning_agent.formulate_plan()
    
    print("\nGenerated Plan (Task List):")
    for task in plan:
        print(task)
    
    # Generate and print the complete Python script for the plan
    plan_script = planning_agent.generate_plan_script(plan)
    print("\n=== Generated Plan Script ===")
    print(plan_script)
